#create a new variable class of property type. As there are 55 different property in from (shared room, boats , entire bungalov etc..) 
#We here create 3 groups of accomodation type: 1. if the room is  shared with other people  2.if the accomodation (might be a house as a bungalov or a boat)is shared
#3. if the accomodation in entirly for the host and no ine else is supposed to be in the living area

categories <- unique(ny_df$property_type) 
numberOfCategories <- length(categories)
categories;numberOfCategories


unit <- 1
while (unit<20000){
  if (grepl('Shared', ny_df$property_type[unit], fixed = FALSE)==TRUE){
    ny_df$classes_property_type[unit]=1
  }
  else if (grepl('Floor', ny_df$property_type[unit], fixed = FALSE)==TRUE){
    ny_df$classes_property_type[unit]=1
  }
  else if (grepl('Private', ny_df$property_type[unit], fixed = FALSE)==TRUE){
    ny_df$classes_property_type[unit]=2
  }
  else if (grepl('Room', ny_df$property_type[unit], fixed = FALSE)==TRUE){
    ny_df$classes_property_type[unit]=2
  }
  else if (grepl('Entire', ny_df$property_type[unit], fixed = FALSE)==TRUE){
    ny_df$classes_property_type[unit]=3
  }
  else {
    ny_df$classes_property_type[unit]=3
  }
  unit <- unit + 1
}


#create new variables regarding bathrooms 
#--bathroom_type (1=shared or 2=not shared) 2_number of bathrooms
is.na(ny_df$bathrooms_text[unit_b])

ny_df$bathrooms_type <- 0

unit_b <- 1

while (unit_b<20000){
  if (grepl('Shared', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathrooms_type[unit_b]=1
  }
  else if (grepl('shared', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathrooms_type[unit_b]=1
  }
  else {
    ny_df$bathrooms_type[unit_b]=2
  }
  unit_b <- unit_b + 1
}

#--number of bathrooms
ny_df$bathroom_number <- 0

unit_b <- 1

while (unit_b<20000){
  if (grepl('1.5', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=1.5
  }
  else if (grepl('2.5', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=2.5
  }
  else if (grepl('3.5', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=3.5
  }
  else if (grepl('2', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=2
  }
  else if (grepl('1', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=1
  }
  else if (grepl('3', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=3
  }
  else if (grepl('4', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=4
  }
  else if (grepl('0.5', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=0.5
  }
  else if (grepl('half', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=0.5
  }
  else if (grepl('Half', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=0.5
  }
  else if (grepl('5', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=5
  }
  else if (grepl('6', ny_df$bathrooms_text[unit_b], fixed = FALSE)==TRUE){
    ny_df$bathroom_number[unit_b]=6
  }
  else {
    ny_df$bathroom_number[unit_b]=1
  }
  unit_b <- unit_b + 1
}


#creation of variable number of amenities
library(stringr)
ny_df$n_amenities <- str_count(ny_df$amenities, ',')

#specific amenities

#WIFI
ny_df$amenties_Wifi <- (grepl('Wifi', ny_df$amenities, fixed = FALSE))

#Backyard
ny_df %>%
  count((grepl('Backyard', ny_df$amenities, fixed = FALSE)))

ny_df$amenties_Backyard <- (grepl('Backyard', ny_df$amenities, fixed = FALSE))

#TV
ny_df %>%
  count((grepl('TV', ny_df$amenities, fixed = FALSE)))

ny_df$amenties_Backyard <- (grepl('TV', ny_df$amenities, fixed = FALSE))

#Washing machine
ny_df %>%
  count((grepl('Washer', ny_df$amenities, fixed = FALSE)))

ny_df$amenties_Backyard <- (grepl('Washer', ny_df$amenities, fixed = FALSE))

#Dishwasher
ny_df %>%
  count((grepl('Dishwasher', ny_df$amenities, fixed = FALSE)))

ny_df$amenties_Backyard <- (grepl('Dishwasher', ny_df$amenities, fixed = FALSE))



## Price
ny_df$price_new <-  as.factor(ny_df$price)

ny_df$price_new <- as.numeric(gsub('[$,]', '', ny_df$price))



#understand the price 

ny_df$price_per_accomate <- ny_df$price_new/ny_df$accommodates

sd(as.numeric(ny_df$price_per_accomate))

library("stringr")

ny_df$price_per_accomate <-  str_remove(ny_df$price_per_accomate, "^0+")



## FILTERING OUT MORE UNITS:
## Those units for which price is zeo and number of bed  is Na

ny_df <- subset(ny_df, ny_df$price_new!=0)


## The final output for the lasso regression is this one
summary(ny_df)

ny_lasso <- ny_df[,c('id','host_response_rate','host_acceptance_rate','host_is_superhost','host_total_listings_count','host_has_profile_pic','host_identity_verified','neighbourhood'
                     ,'accommodates','bedrooms','beds','minimum_nights_avg_ntm','maximum_nights_avg_ntm','has_availability','availability_60','availability_365','number_of_reviews',
                     'review_scores_accuracy','review_scores_cleanliness','review_scores_checkin','review_scores_communication','review_scores_location','review_scores_value','calculated_host_listings_count'
                     ,'reviews_per_month','n_days_last_review','n_character_in_desription','n_days_host_since','n_characters_in_host_about','n_host_verifications','classes_property_type',
                     'bathrooms_type','bathroom_number','n_amenities','amenties_Wifi','amenties_Backyard','price_new','price_per_accomate')]
View(ny_lasso)




###  LASSO  ###

# Loading the library
install.packages("glmnet")
library(glmnet)

summary(ny_lasso)

# Loading the data

x_vars <- model.matrix(review_scores_value~. , ny_lasso)
y_var <- ny_lasso$review_scores_value
lambda_seq <- 10^seq(2, -2, by = -.1)

# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]

cv_output <- cv.glmnet(x_vars[train,], y_var[train],
                       alpha = 1, lambda = lambda_seq, 
                       nfolds = 5)

# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam

# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])

